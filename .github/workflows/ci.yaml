name: CI

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  schedule:
  - cron: 0 4 * * *
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    env:
      CLIENT_TEST_E2E_USER_NAME: ${{ secrets.CLIENT_TEST_E2E_USER_NAME }}
      CLIENT_TEST_E2E_USER_NAME_ALT: ${{ secrets.CLIENT_TEST_E2E_USER_NAME_ALT }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v3
    - name: Install python
      uses: actions/setup-python@v3
      with:
        python-version: "3.7"
    - name: Cache packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py-3.7-${{ hashFiles('requirements.txt') }}
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint
      env:
        CI_LINT_RUN: 1
    - name: Build image
      run: make build
    - name: Run tests
      run: |
        # Privileged mode is required only if docker-engine use aufs driver for storage
        docker run --privileged -t \
          -e CLIENT_TEST_E2E_USER_NAME \
          -e CLIENT_TEST_E2E_USER_NAME_ALT \
          platform-e2e:latest cluster-test
  release:
    name: Release package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout commit
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Parse tag
      id: parse_tag
      run: |
        echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push to registry
      uses: docker/build-push-action@v3
      env:
        IMAGE_REPO: ghcr.io/neuro-inc/platform-e2e
      with:
        context: "."
        push: true
        tags: |
          ${{ env.IMAGE_REPO }}:${{ steps.parse_tag.outputs.tag }}
          ${{ env.IMAGE_REPO }}:latest
